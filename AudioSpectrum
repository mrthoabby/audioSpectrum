export class AudioSpectrum {

    static audioContext;
    static analyser;
    static microphone;
    static javascriptNode;

    static micSpectrum(stream, meter) {
        AudioSpectrum.audioContext = new AudioContext();
        AudioSpectrum.analyser = AudioSpectrum.audioContext.createAnalyser();

        AudioSpectrum.microphone = AudioSpectrum.audioContext.createMediaStreamSource(stream);
        AudioSpectrum.javascriptNode = AudioSpectrum.audioContext.createScriptProcessor(2048, 1, 1);

        AudioSpectrum.analyser.smoothingTimeConstant = 0.8;
        AudioSpectrum.analyser.fftSize = 1024;

        AudioSpectrum.microphone.connect(AudioSpectrum.analyser);
        AudioSpectrum.analyser.connect(AudioSpectrum.javascriptNode);
        AudioSpectrum.javascriptNode.connect(AudioSpectrum.audioContext.destination);

        AudioSpectrum.javascriptNode.onaudioprocess = function () {
            // console.log("funciona");
            const array = new Uint8Array(AudioSpectrum.analyser.frequencyBinCount);
            AudioSpectrum.analyser.getByteFrequencyData(array);
            let values = 0;

            const length = array.length;
            for (let i = 0; i < length; i++) {
                values += array[i];
            }

            const average = values / length;
            meter.value = Math.round(average + 2);
        }
    }
    static micSpectrumForCanvas(stream, canvas) {
        AudioSpectrum.audioContext = new AudioContext();
        AudioSpectrum.analyser = AudioSpectrum.audioContext.createAnalyser();

        AudioSpectrum.microphone = AudioSpectrum.audioContext.createMediaStreamSource(stream);
        AudioSpectrum.javascriptNode = AudioSpectrum.audioContext.createScriptProcessor(2048, 1, 1);

        AudioSpectrum.analyser.smoothingTimeConstant = 0.8;
        AudioSpectrum.analyser.fftSize = 1024;

        AudioSpectrum.microphone.connect(AudioSpectrum.analyser);
        AudioSpectrum.analyser.connect(AudioSpectrum.javascriptNode);
        AudioSpectrum.javascriptNode.connect(AudioSpectrum.audioContext.destination);

        AudioSpectrum.javascriptNode.onaudioprocess = function () {
            // console.log("funciona");
            const array = new Uint8Array(AudioSpectrum.analyser.frequencyBinCount);
            AudioSpectrum.analyser.getByteFrequencyData(array);
            let values = 0;

            const length = array.length;
            for (let i = 0; i < length; i++) {
                values += array[i];
            }

            const average = values / length;
            const ancho = Math.round(average + 2) > 50 ? 52 : Math.round(average + 40);
            const blur = Math.round(average + 40) > 40 ? 40 : Math.round(average + 40);

            canvas.clearRect(0, 0, 200, 200);
            canvas.lineWidth = blur > 25 ? 25 : blur;
            canvas.globalAlpha = 0.75;
            canvas.beginPath();
            canvas.shadowBlur = blur;
            canvas.shadowOffsetX = 4;
            canvas.shadowOffsetY = 4;
            canvas.shadowColor = "#005e9d";
            canvas.strokeStyle = "#005e9d67";
            canvas.arc(100, 100, ancho, 0, 2 * Math.PI);
            canvas.stroke();
        }
    }
}
